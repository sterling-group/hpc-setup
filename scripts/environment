#!/usr/bin/env sh
###############################################################################
# Sterling Group Environment Setup (Mostly POSIX + Conda Caching)
# -----------------------------------------------------------------------------
#  - Works in bash, zsh, dash, etc. (not csh!)
#  - Sets up paths and aliases for G2 / Juno HPC clusters.
#  - Lazy loads Conda upon the first use of "activate", then caches environment list.
#  - Subsequent calls to "activate" do NOT re-source conda.sh or re-run `conda env list`.
#
# Author:  Markus G. S. Weiss
# Date:    2025-01-15
###############################################################################

###############################################################################
# 1. Color Definitions (POSIX-Compatible)
###############################################################################
COLOR_RESET='\033[0m'
COLOR_RED='\033[1;31m'
COLOR_GREEN='\033[1;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_BLUE='\033[1;34m'

###############################################################################
# 2. HPC Cluster Detection
#    (Expects CLUSTER_NAME to be set externally, e.g. "g2" or "juno".)
###############################################################################
if [ -z "${CLUSTER_NAME:-}" ]; then
  printf "%b[WARNING]%b CLUSTER_NAME is not set. Some paths may not be configured.\n" \
    "$COLOR_YELLOW" "$COLOR_RESET"
fi

G2_STERLING_GROUP="/mfs/io/groups/sterling"
JUNO_STERLING_GROUP="/groups/sterling"
STERLING_GROUP=""
CONDA_ROOT=""

if [ "$CLUSTER_NAME" = "g2" ]; then
  STERLING_GROUP="$G2_STERLING_GROUP"
  CONDA_ROOT="$G2_STERLING_GROUP/miniconda3"
elif [ "$CLUSTER_NAME" = "juno" ]; then
  STERLING_GROUP="$JUNO_STERLING_GROUP"
  CONDA_ROOT="$JUNO_STERLING_GROUP/miniconda3"
fi

###############################################################################
# 3. HPC Environment Setup
###############################################################################
if [ -n "$STERLING_GROUP" ] && [ -d "$STERLING_GROUP" ]; then
  USER_BHOME="$STERLING_GROUP/mfshome/$USER"
  
  # Add sterling scripts to PATH if present
  if [ -d "$STERLING_GROUP/scripts" ]; then
    PATH="$STERLING_GROUP/scripts:$PATH"
  fi  
  
  # Define an alias to jump to BHOME if it exists
  if [ -d "$USER_BHOME" ]; then
    alias cdh="cd '$USER_BHOME'"
    # Uncomment next line if you want to *always* cd to BHOME at login:
    # cd "$USER_BHOME" >/dev/null 2>&1
  fi  
  
  # Additional HPC aliases
  alias cdp='cd "$STERLING_GROUP/scripts"'   # Jump to group scripts
  alias sq='squeue -u "$USER"'               # Show own jobs in queue
  alias sqa="$STERLING_GROUP/scripts/qsage3 -sjw"  # Example HPC command
fi

###############################################################################
# 4. Common Aliases and Functions
###############################################################################
alias ll='ls -lh'
alias la='ls -A'
alias l='ls'
alias cp='cp -i'  # Interactive copy

# Create-and-cd
mk() {
  mkdir -p "$1" && cd "$1" || return 1
}

# cd-and-ls
cl() {
  cd "$1" || return 1
  ls -lh 
}

###############################################################################
# 5. Conda Environment Management (Lazy Loading + Caching)
###############################################################################
# We keep two global variables:
#   1) CONDA_INIT_DONE  = "yes" if conda.sh has been sourced
#   2) CACHED_CONDA_ENVS = list of existing conda env names (one per line)
#
# This way, we:
#   - Only source conda.sh the first time "activate" is called.
#   - Only run `conda env list` once, caching the result for faster lookups.

CONDA_INIT_DONE=""
CACHED_CONDA_ENVS=""

# POSIX note: no arrays; store environment names in a single string separated by newlines.
conda_update_cache() {
  # This updates CACHED_CONDA_ENVS with the environment names we find.
  # We skip lines starting with '#' and blank lines. Adjust as you like.
  CACHED_CONDA_ENVS="$(conda env list 2>/dev/null | grep -v '^#' | awk '{print $1}')"
}

activate() {
  # If we're not interactive (no PS1), do nothing
  [ -z "${PS1:-}" ] && return 0

  # Lazy source conda.sh once
  if [ -z "$CONDA_INIT_DONE" ]; then
    if [ -n "$CONDA_ROOT" ] && [ -f "$CONDA_ROOT/etc/profile.d/conda.sh" ]; then
      # shellcheck disable=SC1091
      . "$CONDA_ROOT/etc/profile.d/conda.sh"
      CONDA_INIT_DONE="yes"
      # Fetch environment list once
      conda_update_cache
    else
      printf "%bError:%b Could not source Conda from %s\n" \
        "$COLOR_RED" "$COLOR_RESET" "$CONDA_ROOT" 1>&2
      return 1
    fi  
  fi  

  # Decide which environment to activate
  envname="${1:-creator}"  # default to 'creator' if none provided

  # Check if envname is in the cached list
  echo "$CACHED_CONDA_ENVS" | grep -qx "$envname"
  if [ $? -eq 0 ]; then
    # Found in the cached list
    printf "%bActivating environment:%b %b%s%b\n" \
      "$COLOR_BLUE" "$COLOR_RESET" "$COLOR_GREEN" "$envname" "$COLOR_RESET"
    conda activate "$envname"
    return 0
  else
    # Not in cached list. Possibly the user created a new environment in
    # another session or something. Let's re-check once more.
    conda_update_cache
    echo "$CACHED_CONDA_ENVS" | grep -qx "$envname"
    if [ $? -eq 0 ]; then
      # Found after re-check
      printf "%bActivating environment:%b %b%s%b\n" \
        "$COLOR_BLUE" "$COLOR_RESET" "$COLOR_GREEN" "$envname" "$COLOR_RESET"
      conda activate "$envname"
      return 0
    fi
  fi

  # If we get here, the env doesn't exist
  printf "%bError:%b Environment '%s' not found.\n" \
    "$COLOR_RED" "$COLOR_RESET" "$envname" 1>&2
  printf "Create it with: %bconda create --name %s%b\n" \
    "$COLOR_GREEN" "$envname" "$COLOR_RESET"
  return 1
}

###############################################################################
# 6. Final Touches
###############################################################################
export PATH

# Optionally display a short message once per interactive shell
# (Remove or comment out if you prefer silence.)
if [ -n "${PS1:-}" ]; then
  printf "%bSterling environment loaded. Cluster: %b%s%b\n" \
    "$COLOR_YELLOW" "$COLOR_GREEN" "${CLUSTER_NAME:-unknown}" "$COLOR_RESET"
fi

# End of environment script
###############################################################################
