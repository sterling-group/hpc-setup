#!/usr/bin/env sh
###############################################################################
# Sterling Group Environment Setup
# -----------------------------------------------------------------------------
# This script sets up the environment for the Sterling Group HPC clusters.
# It includes:
#   - Cluster-specific paths and aliases
#   - Common shell aliases and functions
#   - Conda environment management with a custom 'activate' function
#
# Compatibility:
#   - Designed for Bash/Zsh (Bourne-compatible shells)
#   - Uses 'alias', which is supported in Bash/Zsh but not strictly POSIX
#
# Usage:
#   1. Source this script in your ~/.bashrc or ~/.zshrc:
#        [ -f "/path/to/sterling_env.sh" ] && . "/path/to/sterling_env.sh"
#   2. Use the `activate` function to manage Conda environments:
#        activate            # Lists environments (excluding 'base')
#        activate myenv      # Activates 'myenv' if it exists
#
# Author:  Markus G. S. Weiss
# Date:    2025-09-27
###############################################################################

###############################################################################
# 1. Color Definitions
#    (Used for formatting output messages)
###############################################################################
COLOR_RESET='\033[0m'
COLOR_RED='\033[1;31m'
COLOR_GREEN='\033[1;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_BLUE='\033[1;34m'

###############################################################################
# 2. HPC Cluster Detection
#    (Sets paths based on the CLUSTER_NAME environment variable)
###############################################################################
if [ -z "${CLUSTER_NAME:-}" ]; then
  printf "%b[WARNING]%b CLUSTER_NAME not set. Some paths may not be configured.\n" \
    "$COLOR_YELLOW" "$COLOR_RESET"
fi

# Define cluster-specific paths
G2_STERLING_GROUP="/groups/sterling"
JUNO_STERLING_GROUP="/groups/sterling"
STERLING_GROUP=""
CONDA_ROOT=""

case "$CLUSTER_NAME" in
  g2) 
    STERLING_GROUP="$G2_STERLING_GROUP"
    CONDA_ROOT="$G2_STERLING_GROUP/miniconda3"
    ;;  
  juno)
    STERLING_GROUP="$JUNO_STERLING_GROUP"
    CONDA_ROOT="$JUNO_STERLING_GROUP/miniconda3"
    ;;  
esac

###############################################################################
# 3. HPC Environment Setup
#    (Adds cluster-specific scripts to PATH and defines aliases)
###############################################################################
if [ -n "$STERLING_GROUP" ] && [ -d "$STERLING_GROUP" ]; then
  USER_MFSHOME="$STERLING_GROUP/mfshome/$USER"

  # Add Sterling scripts to PATH if present
  if [ -d "$STERLING_GROUP/scripts" ]; then
    PATH="$STERLING_GROUP/scripts:$PATH"
  fi  

  # Alias to navigate to HPC home directory, if it exists
  if [ -d "$USER_MFSHOME" ]; then
    alias cdh="cd '$USER_MFSHOME'"
    # Uncomment the following line to automatically navigate to HPC home on login:
    cd "$USER_MFSHOME" >/dev/null 2>&1
  fi  

  # Additional HPC-specific aliases
  alias cdp='cd "$STERLING_GROUP/scripts"'
  alias sq='squeue -u "$USER"'
  alias sqa="$STERLING_GROUP/scripts/qsage3 -sjw"
fi

###############################################################################
# 4. Common Aliases and Functions
#    (General-purpose shell enhancements)
###############################################################################
# File listing aliases
alias ll='ls -lh'
alias la='ls -A'
alias l='ls'

# Interactive copy
alias cp='cp -i'

# Directory helpers
mk() {
  mkdir -p "$1" && cd "$1" || return 1
}

cl() {
  cd "$1" || return 1
  ls -lh 
}

###############################################################################
# 5. Conda Environment Management
#    (Defines the `activate` function for managing Conda environments)
###############################################################################
# Universal Conda Environment Management
# - Fast environment detection: Direct filesystem checks instead of `conda env list`
# - Source conda.sh once: Only when activate is first called, then flag is set
# - Minimal functions: activate

# Color Definitions (for conda activate function)
COLOR_RESET='\033[0m'
COLOR_RED='\033[1;31m'
COLOR_GREEN='\033[1;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_BLUE='\033[1;34m'

# Conda Environment Management (Universal)

# Flag to track if conda has been initialized
CONDA_INIT_DONE=""

# Fast conda environment detection - replicates `conda env list` without calling conda
conda_fast_env_list() {
    # Ensure we have a conda root if possible
    if [ -z "$CONDA_ROOT" ]; then
        detect_conda_root || true
    fi  
    
    # Setup: Hash table for O(1) deduplication, cached variables for performance
    local -A seen_envs                    # Associative array prevents duplicates instantly
    local root="${CONDA_ROOT}"            # Cache to avoid repeated expansions
    local registry="$HOME/.conda/environments.txt"  # Conda's authoritative environment registry
    
    # PRIMARY SOURCE: Process conda's registry file (contains 95% of environments)
    # This file is maintained by conda and contains all known environment paths
    if [ -f "$registry" ]; then
        while IFS= read -r prefix || [ -n "$prefix" ]; do  # Handle files without final newline
            # Fast filtering: Skip comments and empty lines immediately
            [[ "$prefix" =~ ^[[:space:]]*# ]] || [ -z "$prefix" ] && continue
    
            # Deduplication: O(1) hash table lookup vs O(n) array search
            [ -n "${seen_envs[$prefix]}" ] && continue
    
            # Validation: Ensure environment is valid (has conda-meta directory)
            [ ! -d "$prefix/conda-meta" ] && continue
    
            # Mark as processed to prevent duplicates
            seen_envs[$prefix]=1
    
            # INLINE FORMATTING: Process and format in single pass
            # Extract meaningful names from paths for better UX
            if [ "$prefix" = "$root" ]; then
                # Base environment: Always named "base"
                printf "  %-20s %s\n" "base" "$prefix"
            elif [[ "$prefix" == */envs/* ]]; then
                # Standard conda environments: Extract name from /envs/name pattern
                # This works with ANY conda installation (/path/to/conda/envs/myenv)
                printf "  %-20s %s\n" "${prefix##*/}" "$prefix"
            else
                # Non-standard environments: Use full path as name
                # These are usually environments created with custom --prefix
                printf "  %-20s %s\n" "$prefix" "$prefix"
            fi
        done < "$registry"
    fi  
    
    # FALLBACK: Filesystem scan for environments not in registry (rare edge case)
    # Only needed if environments exist in standard locations but aren't registered
    for envdir in "$root/envs" "$HOME/.conda/envs"; do
        # Skip if directory doesn't exist (avoid unnecessary filesystem access)
        [ ! -d "$envdir" ] && continue
    
        # Scan for environments in this directory
        for envpath in "$envdir"/*; do
            # Validate: Must be a directory with conda-meta
            [ ! -d "$envpath/conda-meta" ] && continue
    
            # Skip if already processed from registry
            [ -n "${seen_envs[$envpath]}" ] && continue
    
            # Mark as seen and format output
            seen_envs[$envpath]=1
            printf "  %-20s %s\n" "${envpath##*/}" "$envpath"
        done
    done
}

# The `activate` function - simple and lean
activate() {
    # # Do nothing if the shell is not interactive
    # [ -z "${PS1:-}" ] && return 0

    # Ensure CONDA_ROOT is set: prefer cluster configs, else auto-detect common ~/opt or /opt installs
    if [ -z "$CONDA_ROOT" ]; then
        if ! detect_conda_root; then
            printf "%bError:%b CONDA_ROOT not set and no Conda installation found in ~/opt or /opt.\n" \
                "$COLOR_RED" "$COLOR_RESET" 1>&2
            printf "Searched: ~/opt/miniconda3, ~/opt/conda, /opt/miniconda3, /opt/conda, and common user forges.\n" 1>&2
            return 1
        fi
    fi  

    # Source conda.sh only once
    if [ -z "$CONDA_INIT_DONE" ]; then
        if [ -f "$CONDA_ROOT/etc/profile.d/conda.sh" ]; then
            # shellcheck disable=SC1091
            . "$CONDA_ROOT/etc/profile.d/conda.sh"
            CONDA_INIT_DONE="yes"
        else
            printf "%bError:%b Cannot find Conda at %s/etc/profile.d/conda.sh\n" \
                "$COLOR_RED" "$COLOR_RESET" "$CONDA_ROOT" 1>&2
            return 1
        fi
    fi  

    local env_arg="$1"

    # Case 1: No argument provided - print environments (name and path) like `conda env list`
    if [ -z "$env_arg" ]; then
        echo "# conda environments:"
        echo
        # Use optimized lister - already formatted and excludes base environments
        conda_fast_env_list | grep -v '^  base '
        return 0
    fi  

    # Case 2: Only activate valid envs; never activate base
    if [ "$env_arg" = "base" ]; then
        printf "%bRefusing to activate 'base'.%b Use 'activate creator' or create a new env:\n" \
            "$COLOR_YELLOW" "$COLOR_RESET"
        printf "  conda create -n <name> python=3.11\n"
        return 1
    fi  

    # Check if environment exists by looking for it in our formatted output
    if conda_fast_env_list | grep -q "^  $env_arg "; then
        printf "%bActivating environment:%b %b%s%b\n" \
            "$COLOR_BLUE" "$COLOR_RESET" "$COLOR_GREEN" "$env_arg" "$COLOR_RESET"
        conda activate "$env_arg"
    else
        printf "%bEnvironment '%s' not found.%b\n" \
            "$COLOR_RED" "$env_arg" "$COLOR_RESET"
        printf "Create it with:\n  conda create -n %s python=3.11\n" "$env_arg"
        return 1
    fi  
}


# Export Functions
export -f activate
###############################################################################
# 6. Final Touches
#    (Exports PATH and displays a startup message in interactive shells)
###############################################################################
export PATH

# Display a startup message for interactive shells
if [ -n "${PS1:-}" ]; then
  printf "%bSterling environment loaded. Cluster:%b %s\n" \
    "$COLOR_YELLOW" "$COLOR_RESET" "${CLUSTER_NAME:-unknown}"
fi

###############################################################################
# End of Sterling Group Environment Setup
###############################################################################
