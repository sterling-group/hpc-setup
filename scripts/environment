#!/usr/bin/env sh
###############################################################################
# Sterling Group Environment Setup
# -----------------------------------------------------------------------------
# This script sets up the environment for the Sterling Group HPC clusters.
# It includes:
#   - Cluster-specific paths and aliases
#   - Common shell aliases and functions
#   - Conda environment management with a custom 'activate' function
#
# Compatibility:
#   - Mostly POSIX-compatible
#   - Designed for Bash/Zsh (Bourne-compatible shells)
#   - Uses 'alias', which is supported in Bash/Zsh but not strictly POSIX
#
# Usage:
#   1. Source this script in your ~/.bashrc or ~/.zshrc:
#        [ -f "/path/to/sterling_env.sh" ] && . "/path/to/sterling_env.sh"
#   2. Use the `activate` function to manage Conda environments:
#        activate            # Lists environments (excluding 'base') and activates 'creator'
#        activate myenv      # Activates 'myenv' if it exists; otherwise, activates 'creator'
#
# Author:  Markus G. S. Weiss
# Date:    2025-01-15
###############################################################################

###############################################################################
# 1. Color Definitions
#    (Used for formatting output messages)
###############################################################################
COLOR_RESET='\033[0m'
COLOR_RED='\033[1;31m'
COLOR_GREEN='\033[1;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_BLUE='\033[1;34m'

###############################################################################
# 2. HPC Cluster Detection
#    (Sets paths based on the CLUSTER_NAME environment variable)
###############################################################################
if [ -z "${CLUSTER_NAME:-}" ]; then
  printf "%b[WARNING]%b CLUSTER_NAME not set. Some paths may not be configured.\n" \
    "$COLOR_YELLOW" "$COLOR_RESET"
fi

# Define cluster-specific paths
G2_STERLING_GROUP="/mfs/io/groups/sterling"
JUNO_STERLING_GROUP="/groups/sterling"
STERLING_GROUP=""
CONDA_ROOT=""

case "$CLUSTER_NAME" in
  g2) 
    STERLING_GROUP="$G2_STERLING_GROUP"
    CONDA_ROOT="$G2_STERLING_GROUP/miniconda3"
    ;;  
  juno)
    STERLING_GROUP="$JUNO_STERLING_GROUP"
    CONDA_ROOT="$JUNO_STERLING_GROUP/miniconda3"
    ;;  
esac

###############################################################################
# 3. HPC Environment Setup
#    (Adds cluster-specific scripts to PATH and defines aliases)
###############################################################################
if [ -n "$STERLING_GROUP" ] && [ -d "$STERLING_GROUP" ]; then
  USER_BHOME="$STERLING_GROUP/mfshome/$USER"

  # Add Sterling scripts to PATH if present
  if [ -d "$STERLING_GROUP/scripts" ]; then
    PATH="$STERLING_GROUP/scripts:$PATH"
  fi  

  # Alias to navigate to HPC home directory, if it exists
  if [ -d "$USER_BHOME" ]; then
    alias cdh="cd '$USER_BHOME'"
    # Uncomment the following line to automatically navigate to HPC home on login:
    # cd "$USER_BHOME" >/dev/null 2>&1
  fi  

  # Additional HPC-specific aliases
  alias cdp='cd "$STERLING_GROUP/scripts"'
  alias sq='squeue -u "$USER"'
  alias sqa="$STERLING_GROUP/scripts/qsage3 -sjw"
fi

###############################################################################
# 4. Common Aliases and Functions
#    (General-purpose shell enhancements)
###############################################################################
# File listing aliases
alias ll='ls -lh'
alias la='ls -A'
alias l='ls'

# Interactive copy
alias cp='cp -i'

# Directory helpers
mk() {
  mkdir -p "$1" && cd "$1" || return 1
}

cl() {
  cd "$1" || return 1
  ls -lh 
}

###############################################################################
# 5. Conda Environment Management
#    (Defines the `activate` function for managing Conda environments)
###############################################################################
# Variables to track Conda initialization and cached environments
CONDA_INIT_DONE=""
CACHED_CONDA_ENVS=""

# Update the cached list of Conda environments, excluding 'base' and 'creator'
conda_update_cache() {
  CACHED_CONDA_ENVS="$(
    conda env list 2>/dev/null \
      | awk '$1 != "base" && $1 != "creator" && $1 !~ /^#/ && NF > 0 {print $1}'
  )"
}

# List cached Conda environments with 'creator' appended at the end
conda_list_cached_envs_with_creator() {
  printf "%bExisting environments (excluding 'base'):%b\n" \
    "$COLOR_YELLOW" "$COLOR_RESET"

  # Print all cached environments
  echo "$CACHED_CONDA_ENVS" | while IFS= read -r env; do
    [ -n "$env" ] && printf "  - %s\n" "$env"
  done

  # Always list 'creator' last
  printf "  - creator\n"
}

# The `activate` function
activate() {
  # Do nothing if the shell is not interactive
  [ -z "${PS1:-}" ] && return 0

  # Lazy-load Conda by sourcing conda.sh only once
  if [ -z "$CONDA_INIT_DONE" ]; then
    if [ -n "$CONDA_ROOT" ] && [ -f "$CONDA_ROOT/etc/profile.d/conda.sh" ]; then
      # shellcheck disable=SC1091
      . "$CONDA_ROOT/etc/profile.d/conda.sh"
      CONDA_INIT_DONE="yes"
      conda_update_cache
    else
      printf "%bError:%b Cannot find Conda at %s\n" \
        "$COLOR_RED" "$COLOR_RESET" "$CONDA_ROOT" 1>&2
      return 1
    fi
  fi

  env_arg="$1"

  # Case 1: No argument provided
  if [ -z "$env_arg" ]; then
    conda_list_cached_envs_with_creator
    printf "\n%bNo environment specified. Defaulting to 'creator'.%b\n" \
      "$COLOR_BLUE" "$COLOR_RESET"
    env_arg="creator"
  fi

  # Case 2: If the user specified 'creator', skip the cache check
  if [ "$env_arg" != "creator" ]; then
    # Check if the specified environment exists in the cached list
    echo "$CACHED_CONDA_ENVS" | grep -qx "$env_arg"
    if [ $? -ne 0 ]; then
      # Environment not found; update cache and recheck
      conda_update_cache
      echo "$CACHED_CONDA_ENVS" | grep -qx "$env_arg"
      if [ $? -ne 0 ]; then
        # Still not found; provide error and fallback to 'creator'
        printf "%bError:%b Environment '%s' not found.\n" \
          "$COLOR_RED" "$COLOR_RESET" "$env_arg" 1>&2
        printf "You can create it with: %bconda create --name %s%b\n\n" \
          "$COLOR_GREEN" "$env_arg" "$COLOR_RESET"

        # List existing environments again
        conda_list_cached_envs_with_creator
        printf "\n%bDefaulting to 'creator'...%b\n" \
          "$COLOR_YELLOW" "$COLOR_RESET"
        env_arg="creator"
      fi
    fi
  fi

  # Attempt to activate the chosen environment
  printf "%bActivating environment:%b %b%s%b\n" \
    "$COLOR_BLUE" "$COLOR_RESET" "$COLOR_GREEN" "$env_arg" "$COLOR_RESET"
  conda activate "$env_arg"
  return 0
}

###############################################################################
# 6. Final Touches
#    (Exports PATH and displays a startup message in interactive shells)
###############################################################################
export PATH

# Display a startup message for interactive shells
if [ -n "${PS1:-}" ]; then
  printf "%bSterling environment loaded. Cluster:%b %s\n" \
    "$COLOR_YELLOW" "$COLOR_RESET" "${CLUSTER_NAME:-unknown}"
fi

###############################################################################
# End of Sterling Group Environment Setup
###############################################################################
