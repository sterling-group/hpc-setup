#!/bin/bash
#
# Sterling Group Environment Setup
# ------------------------------
# Manages environment configuration for G2/Juno HPC clusters
#
# Usage:
#   Source this file in your ~/.bashrc:
#   [ -f ~/environment ] && source ~/environment
#
# Features:
#   - Cluster path configuration (G2/Juno)
#   - User home directory setup
#   - Conda environment management
#   - Common aliases and utilities
#
# Requirements:
#   - Bash 4.0+
#   - CLUSTER_NAME environment variable set
#   - Valid sterling group membership
#   - Miniconda3 installation
#
# Author: 
#     Markus G. S. Weiss
# Date: 
#     2025-01-15
#

# 1. Constants and paths
# ---------------------
# Cluster paths
declare -r G2_STERLING_GROUP="/mfs/io/groups/sterling"
declare -r JUNO_STERLING_GROUP="/groups/sterling"
declare STERLING_GROUP=""
declare CONDA_ROOT=""

# 2. Common aliases and functions
# -----------------------------
alias ll='ls -lh'
alias la='ls -A'
alias l='ls'
alias cp='cp -i'

# Directory management
mk() { mkdir -p "$1" && cd "$1"; }
cl() { cd "$1" && ll; }

# 3. Cluster setup
# --------------
if [[ -n "${CLUSTER_NAME:-}" ]]; then
    # Validate cluster name and set paths
    case "$CLUSTER_NAME" in
        g2)
            STERLING_GROUP="$G2_STERLING_GROUP"
            CONDA_ROOT="$G2_STERLING_GROUP/miniconda3"
            ;;
        juno)
            STERLING_GROUP="$JUNO_STERLING_GROUP"
            CONDA_ROOT="$JUNO_STERLING_GROUP/miniconda3"
            ;;
        *)
            echo -e "Unknown cluster name: $CLUSTER_NAME" >&2
            return 1
            ;;
    esac

    # 4. Cluster-specific setup
    # ------------------------
    if [[ -n "$STERLING_GROUP" ]] && [[ -d "$STERLING_GROUP" ]]; then
        # Set user home directory
        declare -r USER_BHOME="$STERLING_GROUP/mfshome/$USER"
    
        # Add cluster scripts to PATH
        [[ -d "$STERLING_GROUP/scripts" ]] && export PATH="$STERLING_GROUP/scripts:$PATH"
    
        # Setup directory aliases
        alias cdp="cd $STERLING_GROUP/scripts"
        [[ -d "$USER_BHOME" ]] && { 
            alias cdh="cd $USER_BHOME"
            cd "$USER_BHOME" &>/dev/null
        }
    
        # Cluster utilities
        alias sq="squeue -u $USER"
        alias sqa="$STERLING_GROUP/scripts/qsage3 -sjw"
    fi  
fi

# Conda Environment Management
# ----------------------------
# Color definitions for conda messages only
declare -r -A _conda_colors=(
    [reset]="\033[0m"
    [blue]="\033[1;34m"
    [green]="\033[1;32m"
    [yellow]="\033[1;33m"
    [red]="\033[1;31m"
)
{
    # Conda initialization (lazy loaded)
    activate() {
        # Step 1: Check if conda is already loaded
        if ! type conda &>/dev/null; then
            # Step 2: Validate conda.sh exists
            [[ -f "$CONDA_ROOT/etc/profile.d/conda.sh" ]] || {
                echo -e "${_conda_colors[red]}Error: Conda not found at $CONDA_ROOT${_conda_colors[reset]}" >&2
                return 1
            }
            # Step 3: Load conda only on first use
            source "$CONDA_ROOT/etc/profile.d/conda.sh"
        fi
        # Step 4: Use conda normally after loaded
        activate_environment "$@"
    }   

    conda_get_environments() {
        conda env list 2>/dev/null | grep -v '^#\|^base\|^creator\|^$' | awk '{print $1}'
    }   

    conda_show_menu() {
        local -n envs=$1
        echo -e "\n${_conda_colors[yellow]}Available environments:${_conda_colors[reset]}"
        echo "  1 creator (default)"
        local i=2
        for env in "${envs[@]}"; do
            printf "  %d %s\n" "$i" "$env"
            ((i++))
        done
        echo "  0 Cancel"
    }   

    activate_environment() {
        [[ -z "${PS1:-}" ]] && return
        local target_env="${1:-creator}"
    
        # Cache conda environments
        local env_list
        mapfile -t env_list <<< "$(conda_get_environments)"
    
        # Handle no argument case
        if [[ -z "$1" ]]; then
            echo -e "${_conda_colors[yellow]}No environment specified.${_conda_colors[reset]}"
            echo -e "Use the following command to list existing environments:\n   ${_conda_colors[green]}conda env list${_conda_colors[reset]}"
            echo -e "\n${_conda_colors[blue]}Activating 'creator' environment!${_conda_colors[reset]}"
            conda activate creator
            return
        fi

        # Check if environment exists
        if printf '%s\n' "${env_list[@]}" | grep -qw "^${target_env}$"; then
            echo -e "${_conda_colors[blue]}Activating environment:${_conda_colors[reset]} ${_conda_colors[green]}${target_env}${_conda_colors[reset]}"
            conda activate "$target_env"
            return
        fi

        # Environment not found - show error and creation instructions
        echo -e "${_conda_colors[red]}Error: Environment '$target_env' does not exist.${_conda_colors[reset]}"
        echo -e "Create it with:\n   ${_conda_colors[green]}conda create --name $target_env${_conda_colors[reset]}\n"
        echo -e "${_conda_colors[yellow]}Or select an existing environment:${_conda_colors[reset]}"

        # Show menu and get selection
        conda_show_menu env_list
        read -rp "Enter the number of the environment to activate (0 to cancel): " selection

        # Validate and handle selection
        if [[ "$selection" =~ ^[0-9]+$ ]] && ((selection >= 0)) && ((selection <= ${#env_list[@]} + 1)); then
            case "$selection" in
                0)
                    echo -e "${_conda_colors[blue]}Activation canceled.${_conda_colors[reset]}"
                    return 1
                    ;;
                1)
                    echo -e "${_conda_colors[blue]}Activating 'creator' environment${_conda_colors[reset]}"
                    conda activate creator
                    return
                    ;;
                *)
                    local selected_env="${env_list[$((selection - 2))]}"
                    echo -e "${_conda_colors[blue]}Activating environment:${_conda_colors[reset]} ${_conda_colors[green]}${selected_env}${_conda_colors[reset]}"
                    conda activate "$selected_env"
                    return
                    ;;
            esac
        fi

        echo -e "${_conda_colors[red]}Invalid selection. Activation canceled.${_conda_colors[reset]}"
        return 1
    }
}