#!/usr/bin/env bash
###############################################################################
# Sterling Group Environment Setup
# -----------------------------------------------------------------------------
# This script sets up the environment for the Sterling Group HPC clusters.
# It includes:
#   - Cluster-specific paths and aliases
#   - Common shell aliases and functions
#   - Conda environment management with a custom 'activate' function
#
# Compatibility:
#   - Designed for Bash/Zsh
#   - Uses bash/zsh features: associative arrays, [[ ]], pattern matching
#
# Usage:
#   1. Source this script in your ~/.bashrc or ~/.zshrc:
#        [ -f "/path/to/environment" ] && . "/path/to/environment"
#   2. Use the `activate` function to manage Conda environments:
#        activate            # Lists environments (excluding 'base')
#        activate myenv      # Activates 'myenv' if it exists
#
# Author:  Markus G. S. Weiss
# Date:    2025-09-27
###############################################################################

###############################################################################
# 1. Color Definitions
#    (Used for formatting output messages)
###############################################################################
COLOR_RESET='\033[0m'
COLOR_RED='\033[1;31m'
COLOR_GREEN='\033[1;32m'
COLOR_YELLOW='\033[1;33m'
COLOR_BLUE='\033[1;34m'

###############################################################################
# 2. HPC Cluster Detection
#    (Sets paths based on the CLUSTER_NAME environment variable)
###############################################################################
if [ -z "${CLUSTER_NAME:-}" ]; then
  printf "%b[WARNING]%b CLUSTER_NAME not set. Some paths may not be configured.\n" \
    "$COLOR_YELLOW" "$COLOR_RESET"
fi

# Define cluster-specific paths
G2_STERLING_GROUP="/groups/sterling"
JUNO_STERLING_GROUP="/groups/sterling"
STERLING_GROUP=""
CONDA_ROOT=""

case "$CLUSTER_NAME" in
  g2) 
    STERLING_GROUP="$G2_STERLING_GROUP"
    CONDA_ROOT="$G2_STERLING_GROUP/software-tools/miniconda"
    ;;  
  juno)
    STERLING_GROUP="$JUNO_STERLING_GROUP"
    CONDA_ROOT="$JUNO_STERLING_GROUP/software-tools/miniconda"
    ;;  
esac

###############################################################################
# 3. HPC Environment Setup
#    (Adds cluster-specific scripts to PATH and defines aliases)
###############################################################################
if [ -n "$STERLING_GROUP" ] && [ -d "$STERLING_GROUP" ]; then
  MFSHOME="$STERLING_GROUP/mfshome/$USER"

  # Add Sterling scripts to PATH if present
  if [ -d "$STERLING_GROUP/scripts" ]; then
    PATH="$STERLING_GROUP/scripts:$PATH"
  fi

  # Alias to navigate to HPC home directory, if it exists
if [ -d "$MFSHOME" ]; then
    alias cdh="cd '$MFSHOME'"
    # Automatically navigate to HPC home directory on login
    cd "$MFSHOME" >/dev/null 2>&1
  fi

  # Additional HPC-specific aliases
  alias cdp='cd "$STERLING_GROUP/scripts"'
  alias sq='squeue -u "$USER"'
  alias sqa="$STERLING_GROUP/scripts/qsage3 -sjw"
fi

###############################################################################
# 4. Common Aliases and Functions
#    (General-purpose shell enhancements)
###############################################################################
# File listing aliases
alias ll='ls -lh'
alias la='ls -A'
alias l='ls'

# Interactive copy
alias cp='cp -i'

# Directory helpers
mk() {
  mkdir -p "$1" && cd "$1" || return 1
}

cl() {
  cd "$1" || return 1
  ls -lh 
}

###############################################################################
# 5. Conda Environment Management
#    (Defines the `activate` function for managing Conda environments)
###############################################################################

# Flag to track if conda has been initialized
CONDA_INIT_DONE=""

# Fast conda environment detection - avoids calling `conda env list`
conda_fast_env_list() {
    # Declare associative array (bash 4.0+ / zsh)
    local -A seen_envs
    local root="${CONDA_ROOT}"
    local registry="$HOME/.conda/environments.txt"
    
    # Process conda's registry file
    if [ -f "$registry" ]; then
        while IFS= read -r prefix || [ -n "$prefix" ]; do
            # Skip comments and empty lines
            [[ "$prefix" =~ ^[[:space:]]*# ]] || [ -z "$prefix" ] && continue
            
            # Skip duplicates and invalid environments
            [ -n "${seen_envs[$prefix]}" ] && continue
            [ ! -d "$prefix/conda-meta" ] && continue
            
            seen_envs[$prefix]=1
            
            # Format output based on environment type
            if [ "$prefix" = "$root" ]; then
                printf "  %-20s %s\n" "base" "$prefix"
            elif [[ "$prefix" == */envs/* ]]; then
                printf "  %-20s %s\n" "${prefix##*/}" "$prefix"
            else
                printf "  %-20s %s\n" "$prefix" "$prefix"
            fi
        done < "$registry"
    fi  
    
    # Fallback: scan filesystem for unregistered environments
    # Find all conda envs directories dynamically
    for envdir in /*/envs /*/*/envs /*/*/*/envs "$HOME/.conda/envs" "$HOME"/*/envs; do
        [ ! -d "$envdir" ] && continue
        
        for envpath in "$envdir"/*; do
            [ ! -d "$envpath/conda-meta" ] && continue
            [ -n "${seen_envs[$envpath]}" ] && continue
            
            seen_envs[$envpath]=1
            printf "  %-20s %s\n" "${envpath##*/}" "$envpath"
        done
    done
}

# Main activate function for conda environment management
activate() {
    # Ensure CONDA_ROOT is set
    if [ -z "$CONDA_ROOT" ]; then
        printf "%bError:%b CONDA_ROOT not set. Check cluster configuration.\n" \
            "$COLOR_RED" "$COLOR_RESET" 1>&2
        return 1
    fi  

    # Initialize conda only once
    if [ -z "$CONDA_INIT_DONE" ]; then
        if [ -f "$CONDA_ROOT/etc/profile.d/conda.sh" ]; then
            # shellcheck disable=SC1091
            . "$CONDA_ROOT/etc/profile.d/conda.sh"
            CONDA_INIT_DONE="yes"
        else
            printf "%bError:%b Cannot find Conda at %s/etc/profile.d/conda.sh\n" \
                "$COLOR_RED" "$COLOR_RESET" "$CONDA_ROOT" 1>&2
            return 1
        fi
    fi  

    local env_arg="$1"

    # No argument: list environments (excluding base) with usage instructions
    if [ -z "$env_arg" ]; then
        printf "%b# Available conda environments:%b\n" "$COLOR_BLUE" "$COLOR_RESET"
        echo
        conda_fast_env_list | grep -v '^  base '
        echo
        printf "%bUsage:%b\n" "$COLOR_YELLOW" "$COLOR_RESET"
        printf "  %bactivate <env_name>%b     - Activate an existing environment\n" "$COLOR_GREEN" "$COLOR_RESET"
        printf "  %bconda create -n <env_name>%b - Create a new environment\n" "$COLOR_GREEN" "$COLOR_RESET"
        return 0
    fi  

    # Refuse to activate base environment
    if [ "$env_arg" = "base" ]; then
        printf "%bWarning:%b Refusing to activate '%bbase%b' environment.\n" \
            "$COLOR_YELLOW" "$COLOR_RESET" "$COLOR_RED" "$COLOR_RESET"
        printf "%bCreate a new environment instead:%b\n" "$COLOR_BLUE" "$COLOR_RESET"
        printf "  %bconda create -n <env_name>%b\n" "$COLOR_GREEN" "$COLOR_RESET"
        return 1
    fi  

    # Activate environment if it exists
    if conda_fast_env_list | grep -q "^  $env_arg "; then
        printf "%bActivating environment:%b %b%s%b\n" \
            "$COLOR_BLUE" "$COLOR_RESET" "$COLOR_GREEN" "$env_arg" "$COLOR_RESET"
        conda activate "$env_arg"
    else
        printf "%bError:%b Environment '%b%s%b' not found.\n" \
            "$COLOR_RED" "$COLOR_RESET" "$COLOR_YELLOW" "$env_arg" "$COLOR_RESET"
        printf "%bCreate it with:%b\n" "$COLOR_BLUE" "$COLOR_RESET"
        printf "  %bconda create -n %s%b\n" "$COLOR_GREEN" "$env_arg" "$COLOR_RESET"
        return 1
    fi  
}

# Export functions for use in subshells
export -f activate
###############################################################################
# 6. Final Touches
#    (Exports PATH and displays a startup message in interactive shells)
###############################################################################
export PATH

# Display a startup message for interactive shells
if [ -n "${PS1:-}" ]; then
  printf "%bSterling environment loaded. Cluster:%b %s\n" \
    "$COLOR_YELLOW" "$COLOR_RESET" "${CLUSTER_NAME:-unknown}"
fi

###############################################################################
# End of Sterling Group Environment Setup
###############################################################################
