#!/bin/bash
#
# Sterling Group Environment Setup
# Manages conda environments and paths for G2/Juno clusters
#
# Sterling Group Environment Setup
# 1. Constants and color definitions
declare -r COLOR_RESET="\033[0m"
declare -r COLOR_BLUE="\033[1;34m"
declare -r COLOR_GREEN="\033[1;32m"
declare -r COLOR_YELLOW="\033[1;33m"
declare -r COLOR_RED="\033[1;31m"

# 2. Cluster-independent aliases (always available)
alias ll='ls -lh'
alias la='ls -A'
alias l='ls'
alias cp='cp -i'
mk() { mkdir -p "$1" && cd "$1"; }
cl() { cd "$1" && ll; }

# 3. Cluster validation and setup
if [[ -n "${CLUSTER_NAME:-}" ]]; then
    declare -r G2_STERLING_GROUP="/mfs/io/groups/sterling"
    declare -r JUNO_STERLING_GROUP="/groups/sterling"

    case "$CLUSTER_NAME" in
        g2) 
            STERLING_GROUP="$G2_STERLING_GROUP"
            CONDA_ROOT="$G2_STERLING_GROUP/miniconda3"
            ;;  
        juno)
            STERLING_GROUP="$JUNO_STERLING_GROUP"
            CONDA_ROOT="$JUNO_STERLING_GROUP/miniconda3"
            ;;  
        *)  
            echo -e "${COLOR_RED}Error: Unknown cluster name: $CLUSTER_NAME${COLOR_RESET}" >&2
            ;;  
    esac


    # 4. Cluster-dependent setup (only if valid cluster)
    if [[ -n "${STERLING_GROUP:-}" ]]; then
        declare -r USER_BHOME="$STERLING_GROUP/mfshome/$USER"
        export PATH="$STERLING_GROUP/scripts:$PATH"
        alias cdp="cd $STERLING_GROUP/scripts"
        [[ -d "$USER_BHOME" ]] && { alias cdh="cd $USER_BHOME"; cd "$USER_BHOME" &>/dev/null; }
            
        # Cluster-specific aliases
        alias sq="squeue -u $USER"
        alias sqa="$STERLING_GROUP/scripts/qsage3 -sjw"

        # 5. Lazy load conda functions
        activate() {
            if ! type conda &>/dev/null; then
                source "$CONDA_ROOT/etc/profile.d/conda.sh" || return 1
            fi  
            activate_environment "$@"
        }   
    fi  
fi

# Enhanced Bash function to activate a specified Conda environment, or 'creator' if no argument is passed
# Get cached conda environments
get_conda_environments() {
    conda env list 2>/dev/null | grep -v '^#\|^base\|^$' | awk '{print $1}'
}

show_environment_menu() {
    local -n envs=$1
    echo -e "\n${COLOR_YELLOW}Available environments:${COLOR_RESET}"
    echo "  1 creator (default)"
    local i=2
    for env in "${envs[@]}"; do
        printf "  %d %s\n" "$i" "$env"
        ((i++))
    done
    echo "  0 Cancel"
}

activate_environment() {
    [[ -z "${PS1:-}" ]] && return
    local target_env="${1:-creator}"
        
    # Cache conda environments
    local env_list
    mapfile -t env_list <<< "$(get_conda_environments)"
        
    # Handle no argument case
    if [[ -z "$1" ]]; then
        echo -e "${COLOR_YELLOW}No environment specified.${COLOR_RESET}"
        echo -e "Use the following command to list existing environments:\n   ${COLOR_GREEN}conda env list${COLOR_RESET}"
        echo -e "\n${COLOR_BLUE}Activating 'creator' environment!${COLOR_RESET}"
        echo -e "Create your desired environment with:\n\n   ${COLOR_GREEN}conda create --name <env_name>${COLOR_RESET}\n"
        conda activate creator
        return
    fi  

    # Check if environment exists
    if printf '%s\n' "${env_list[@]}" | grep -qw "^${target_env}$"; then
        echo -e "${COLOR_BLUE}Activating environment:${COLOR_RESET} ${COLOR_GREEN}${target_env}${COLOR_RESET}"
        conda activate "$target_env"
        return
    fi  

    # Environment not found - show error and available options
    echo -e "${COLOR_RED}Error: Environment '$target_env' does not exist.${COLOR_RESET}"
    echo -e "Create it with:\n   ${COLOR_GREEN}conda create --name $target_env${COLOR_RESET}\n"

    # Show menu and get selection
    show_environment_menu env_list
    read -rp "Enter the number of the environment to activate (0 to cancel): " selection

    # Validate selection
    if [[ "$selection" =~ ^[0-9]+$ ]] && ((selection >= 0)) && ((selection <= ${#env_list[@]} + 1)); then
        case "$selection" in
            0)  
                echo -e "${COLOR_BLUE}Activation canceled.${COLOR_RESET}"
                return 1
                ;;  
            1)  
                echo -e "${COLOR_YELLOW}No environment specified.${COLOR_RESET}"
                echo -e "Use the following command to list existing environments:\n   ${COLOR_GREEN}conda env list${COLOR_RESET}"
                echo -e "\n${COLOR_BLUE}Activating 'creator' environment!${COLOR_RESET}"
                echo -e "Create your desired environment with:\n\n   ${COLOR_GREEN}conda create --name <env_name>${COLOR_RESET}\n"
                conda activate creator
                return
                ;;  
            *)  
                local selected_env="${env_list[$((selection - 2))]}"
                echo -e "${COLOR_BLUE}Activating environment:${COLOR_RESET} ${COLOR_GREEN}${selected_env}${COLOR_RESET}"
                conda activate "$selected_env"
                return
                ;;  
        esac
    fi  

    echo -e "${COLOR_RED}Invalid selection. Activation canceled.${COLOR_RESET}"
    return 1
}
